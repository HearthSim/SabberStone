#region copyright
// SabberStone, Hearthstone Simulator in C# .NET Core
// Copyright (C) 2017-2019 SabberStone Team, darkfriend77 & rnilva
//
// SabberStone is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License.
// SabberStone is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
#endregion
using System.Collections.Generic;
using System.Text;
using SabberStoneCore.Enums;
using SabberStoneCore.Model.Entities;
using System;
using SabberStoneCore.Tasks;

namespace SabberStoneCore.Model
{
	/// <summary>
	/// 
	/// </summary>
	public enum ChoiceAction
	{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
		ADAPT, HAND, SUMMON, HEROPOWER, KAZAKUS, TRACKING, INVALID, SPELL_RANDOM, GLIMMERROOT, BUILDABEAST, CAST
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
	}

	/// <summary>
	/// 
	/// </summary>
	public class Choice
	{
		/// <summary>Initializes a new instance of the <see cref="Choice"/> class.</summary>
		/// <param name="controller">The controller.</param>
		/// <autogeneratedoc />
		public Choice(Controller controller)
		{
			Controller = controller;
		}

		/// <summary>Gets or sets the controller making the choice.</summary>
		/// <value>The controller.</value>
		public Controller Controller { get; set; }

		/// <summary>Gets or sets the type of choice.</summary>
		/// <value><see cref="Enums.ChoiceType"/></value>
		public ChoiceType ChoiceType { get; set; } = ChoiceType.INVALID;

		/// <summary>Gets or sets the choice action.</summary>
		/// <value>The choice action.</value>
		public ChoiceAction ChoiceAction { get; set; } = ChoiceAction.INVALID;

		/// <summary>Gets or sets the IDs of the selected entities.</summary>
		/// <value>The chosen entity IDs.</value>
		public List<int> Choices { get; set; }

		/// <summary>Gets or sets the ID of the entity which produced this choice.</summary>
		/// <value>The entity ID.</value>
		public int SourceId { get; set; }

		/// <summary>Gets or sets the IDs of the entities to choose from.</summary>
		/// <value>The entity IDs.</value>
		public List<int> TargetIds { get; set; }

		/// <summary>Gets or sets the remaining choices for the controller.</summary>
		public Queue<Choice> ChoiceQueue { get; set; } = new Queue<Choice>();

		/// <summary>Gets or sets the ID of the last chosen entity.</summary>
		/// <value>The entity Id.</value>
		public int LastChoice { get; set; }

		/// <summary>Gets or sets the card of enchantment that must be applied after the entity is chosen.</summary>
		public Card EnchantmentCard { get; set; }

		/// <summary>Gets or sets the task that must be done after the entity is chosen.</summary>
		public ISimpleTask AfterChooseTask { get; set; }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		public void Stamp(Choice choice)
		{
			ChoiceType = choice.ChoiceType;
			ChoiceAction = choice.ChoiceAction;
			Choices = new List<int>(choice.Choices);
			SourceId = choice.SourceId;
			if (choice.TargetIds != null)
				TargetIds = new List<int>(choice.TargetIds);
			if (choice.ChoiceQueue.Count != 0)
			{
				foreach (Choice item in choice.ChoiceQueue)
				{
					var clone = new Choice(Controller);
					clone.Stamp(item);
					ChoiceQueue.Enqueue(clone);
				}
			}
			LastChoice = choice.LastChoice;
			EnchantmentCard = choice.EnchantmentCard;
		}

		public string FullPrint()
		{
			var str = new StringBuilder();
			str.Append($"{Controller.Name}[ChoiceType:{ChoiceType}][ChoiceAction:{ChoiceAction}][");
			str.Append(String.Join(",", Choices));
			return str.ToString();
		}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
	}
}
